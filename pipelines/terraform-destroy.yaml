trigger:
- none

name: "DESTROY $(Build.DefinitionName)$(Rev:.r)"

variables:
- group: tf-pipeline-vars

pool:
  vmImage: "ubuntu-20.04"

stages:
- stage: Destroy
  #condition: ${{ variables.DeployEnabled }}
  jobs: 
  - deployment: Terraform DESTROY
    timeoutInMinutes: 0
    environment:
      name: $(ApplicationName)-$(EnvironmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: Bash@3
            displayName: "terraform destroy"
            inputs:
              filePath: pipelines/scripts/terraform-with-backend.sh
              workingDirectory: $(WorkingDirectory)
              arguments: destroy -auto-approve
            env: 
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_TENANT_ID: $(ARM_TENANT_ID)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
              BACKEND_RESOURCE_GROUP_NAME: $(BACKEND_RESOURCE_GROUP_NAME)
              BACKEND_STORAGE_ACCOUNT_NAME: $(BACKEND_STORAGE_ACCOUNT_NAME)
              BACKEND_STORAGE_CONTAINER_NAME: $(BACKEND_STORAGE_CONTAINER_NAME)
              TF_BACKEND_KEY: $(ApplicationName)-$(EnvironmentName)
              TF_VAR_application_name: $(ApplicationName)
